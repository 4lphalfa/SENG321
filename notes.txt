==========
2018-09-06
==========

Not fixing requirements can be expensive

Requirements Engineering is about Expectations Management

Develop skils for
    - analysis and contract negotiation
    - solution seeking in context of customer problem
    - choosing the right requirements technique for particular projects, organizational setting and development process model
    - requirements validation for solution fit



==========
2018-09-10
==========

Latent Knowledge:
    Knowledge that is not readily accessable

Tact Knowledge:
    Knowledge that is readily available, but is considered too obvious to mention

Strategic Considerations to Elicitation
    - What info should be gathered
    - From what sources may it be gleamed
    - By what mechanisms or techniques may it be gathered

Requirements Engineering Process:
    - A description of the problem domain
    - A list of problems requiring solution
    - Any client-imposed constraints upon the behavior or structure of the solution system

Sources of info for Problem Domain
    - Clients
    - Clients' "specifications"
    - Pre-existing solutions and their documentation
    - Users of pre-existing systems
    - Potential users of the new system
    - Predecessor or competitor's products
    - Application (problem) domain experts
    - Documents defining the characteristics and behavior of any interfacing system (terminators)
    - Relevant technical standards and legislation

Elicitation Techniques
    - Background reading
    - Brain storming
    - Discourse analysis
    - Document inspection
    - Ethnography
    - Interviewing
    - Joint Application Design
    - Questionnairs
    - Requirements stripping
    - Sitting with Nellie
    - Task observation
    - Use-case and scenairos

Elicitation Plan Considerations
    - What info should be elicited
    - What sources should be used
    - What mechanisms or techniques should be employed

Info to Elicit
    - The basic type of application
    - The identity of the client
    - The main motivation to the client
    - etc...

Social-political considerations that might interfere with elicitation
    - Fear of redundency
    - Fear of down-sizing
    - Promotion
    - A desire to prove themselves right
    - A desire to maintain power through knowledge
    - Empire building


What is Requirements Engineering
    Set of activities to identify purpose in the context of human activities

If the software doesn't respond how we want, it's not high quality
High quality is hard to measure

Software quality as firness for purpose

Where does RE fint in software development?
    Start early, but we now use iterative design, so RE is revisited frequently

RE requires an ongoing understanding of the problem

Design of software intensive systems: type of a wicked problem:
    - No single formulation of the problem
    - Continuous need for exploration
    - No right or wrong solution
    - Unique characteristics
... Identifying the problem is a problem in itself

Hard vs. Soft Systems
    - Soft systems methods 
        suited for wicked problems
        adopt a Human-centered design view

Requirements Engineering Definition
    RE is a set of activities concerned with identifying and ... - Easterbrook, Ch1

A spectrum of software-intensive systems
    The type of system may determine how requirements are elicited, analyzed, and negotiated

Requirements describe problems
    Requirements
        describe the problem statements
        and
        activites to be supported by the system
    Ideal: separate the problem from solutions
    Practice: very difficult to accomplish

Figure 3 (Easterbrook Ch2): Twin peaks model

Application domain vs. Machine domain (Jackson, The meaning of requirements, 1977)

Example - problem and req vs solution statement
    Context: Design a secure means (software, i.e. the machine) to store data
    Example of a requirements (for the machine): prevent access to unauthorized personnel:
    Example of Domain property: only a manager can assign access authority
    Specification for the machine: when the user enters a valid password, the computer will unlock the door (or the system requires a login and password for access")
    
Problem
Specification
Solution

RE processes
    - Elicitation
    - Analysis
    - Specification
    - Validation and verification
    - Negotiation
    - Management

Do not talk about solutions when eliciting info about the client's problem


Interviews

Distinguish between wants, needs, and wishes
    Try to get the needs

Main Elicitation Techniques
    - Background reading / inspection of documents
    - Interviews
    - Questionnaires
    - Observations
    - Group techniques (JAD, focus groups)
    - Contextual design (Combine interviews and observations)
    - Newer methods:
        * StakeSource
        * Data mining

Interviews
    - Most widely used technique in requirements engineering
    - Analysts interview future users of the system individually to find out
        - What the present system does
        - What changes are needed
    - The info gathered during the interviews enables the analysts to design a new system that will eliminate the shortcomings of the current one.

    Advantages
        - Access to individual stakeholders and their opinions
        - Rich collection of info
        - Ability to adapt questions to particualr situations
    
    Disadvantages
        - Info from multiple sources, hard to analyze
        - Difficult to be a skilled interviewer
        - May intimidate the interviewee

    5 Steps of an interview:
        Preparing for the interview
        Planning and scheduling the interview
        Opening and closing the interview
        Conducting the interview
        Following up for clairification

    Types of interviews:
        Structured
        Unstructured (let's explore the situation)

    Try to avoid using the words: problems, better


Request for Proposal (RFP)
    


By Thurs
    2 min presentation
        What company
        Interview or when the interview is scheduled

By Tues
    Finish interview and...







==========
2018-09-13
==========

What are Requirements?

What is a Requirement?: Describe the problem statements and activities to be supported by they system
    The what vs the solution (the how)

Ex Distinction between a problem statement and a solution statement

The problem domain and the requirements
    Problem domain: The part of the universe within which the problems exist
    The Problem: 
        A control system is needed that will make more efficient use of the lifts in the building
    The Requirements: the effects that the client wishes to be brought about in the problem domain
        ex a lift will only reverse direction when stopped at a floor, the lift will not stop when going down from one floor to the next

Requirements, domain property and the specification
    Requirements: 
    Domain properties: When a lift is within 20cm vertically of the sensor's nominal position the sensor sends a hi signal otherwise a low signal
    Specification: 

Types of requirements
    fucntion of the system is most likely a part of the system

Types of requirements
    Functionality
    Quality assurance
    Security
    Physical Environment
    Interfaces
    Users and human factors
    Documentation
    Data
    Resources
    Design constraints (ex language, archetecture)
    




==========
2018-09-17
==========

(Survey the population by questionnaires or interviews)

Elicitation Techniques
    Questionnaires
        Gather info by neans of a survey
        - Reach a large pool of people
        - Uniform questions
        - location doesn't matter
        - Difficult to contextualize, context is missing
        - Difficult to design well
    Observations
        Takes the analyst in the working context
        - Able to collect contextual information
        - Difficult to obtain access to the customer site
        - Time consuming
        - Does not collect personal opinions
        - Easy to "go native" and think like the population you are observing
    Contextual Inquiry
        A field of intervieing technique aimed at revealing work structure. Field Interview technique.
        - Observe
        - Interview
        - Develop a shared understanding
        - Direct the inquiry from a clear understanding of your own purpose

In the absence of appropriate communication techniques...
    Technical Power (by developers)
        - doesn't allow users to make their own observations
    Structural Power (by customers)
        - defining project tasks
    Conceptual Power (by customers and developers)


Industry Panel - Requirements in the Wild
    Emma 
    Zaine
    Colin
    Jorin

    What role does RE play in company practices?
        Emma
            In a startup the requirements were crazy
            Don't have all requirements at the start
            Ability to adapt to changes
        Zaine
            Startup
            Large company didn't have many requirements
        Colin
            Large sotware company that wasn't always large
            Clent drivin
            Market team driven
            Writing requirements for themselves
    What worked well in terms of managing requirements
        Emma
            Communication
            Scrums/frequent meetings with clients
        Colin
            Well rounded teams
            Communication within the team
            You might not know who the client is
            Understand what you're trying to build/accomplish
        Zaine
            Requirements are like a contract
            Understand what the clents need, and what they're paying for
    How to react to changes in requirements
        Colin
            Negotiation
        Emma
            Happens frequently in smaller companies
            Depends on deadlines
            From a managements perspective, have a general baseline before starting a project
    Explaining that features are not possible
        Emma
            Hopefully it's not your responsibility
            Management should be doing if for you
            Stand your ground and a Buisness Analysist/Project Manager
    Formal requirements change process?
        Emma
            Shred Excel to keep track of the change request
            Communication with development team for time estimate
            Increase it by 50%
        Colin
            Management's decision
            Double estimate
            Small changes might be bigger than expected
            Always give yourself more time
        Zaine
            Approval process takes much longer than development
            Give a bigger estimate
    What happens if you can't speak to the stakeholders often
        Emma
            When you're working on huge projects, requirements phase can take a year+
            Set the requirements very clearly at the start of the projects
    What can we practice in class
        Colin
            Learn how to write things that aren't ambiguous
            Break a feature down
            Prototype
            Understand what the feature is
        Zaine
            Make it clear
            Don't make it too wordy






==========
2018-09-20
==========

Barnga - a cultural game


Time and Team Management

Effective Time Management
    Watch Randy Pausch's 'Time Management' lecture
        also 'Last Lecture'
    Time is a resource 
    Parkinson's Law: The work allocated to a task fills the time allocated to it
    In your project:
        Plan your activities
        Time box your activities
            Always build in contingency (add 25% or double the time)
        Reflect on your estimates/progress relative to capabilities

Effective Team Management
    Comprises a wide variety of skills, personalities, and experiences
    Effective teams are driven by a goal, fuelled by an identy, reflective
    Forming, norming, storming, performing
    In your project:
        Discuss your strengths, work habits, time management skills
        Distribute work and yet ways to integrate work
            Everyone should learn from each deliverable
        Open communication channels
        Regular checkups with team
        Reflect on estimaes/progress relative to capabilities
    Effective Team Member: driven by the team's goal, fulled by attitude, gives befroe asks
    In your project:
        Be a linchpin
        Learn from others
        Consider how you can help the team first


Group Techniques in RE
    Recognition of the need for a high degree of user involvement in system design

Elicitation Techniques
Group Techniques
    Advantages
        - Bring stakeholders together
        - More informal interaction that interviews
    Disadvantages
        - More difficult to deal with groups, needs train facilitator
        - Risk of groupthink

Group techniques for elicitation
    - Focus groups
    - Brainstorming
    - JAD (Joint Application Design)
    - Also referred to as Requirements Workshop
    Characteristics
        - Communication between group members
        - Sharing of information
        - Sharing of workspace
        - Coordination and control of shared objects
        - Decision making
        - Common understanding of the work progress
        - Facilitation

JAD
    Structured agenda, visual aids, a facilitator

Workshops and facilitation
    Balances the needs of content, process, and people





==========
2018-09-24
==========

RE Activities and the Software Process

Re process (revisited)
    Elicitation
        What info should be gathered
        From what sources can it be gathered
        What techniques may it be gathered
    Analysis
        Understanding the problem domain
        Goal: produce the requirements document
            accurate description of what the solution will do (not a specification)
    Specification
        Define the behaviour of the system
        Internal and external design
            External: typical software design
            Internal: defining how the solution is going to work, not how the software is going to work
    Validation and Verification
        What's the difference
            Valadation: are we building the right product
                if you don't do it at the beginning, it snowballs and you might have to undo months of work
            Verification: are we building the product right (is it working)
    Negotiation
        Ensure expectations are consistent for both sides
    Management
        Adhere to the requirements (or establish a process to allow for change)
        Traceability: we have are requirement, through the entire software process, you want to trace something to the initial requirements
            We have coverage for all of our requirements

The problem of requrements
    no right or wrong way to do it

RE process and documentation
    
Where does RE fit in Software Development
    BDUF (Big Design Up Front)
        Critical systems (pacemakers, self driving cars) 
    It can go anywhere, but usually at the beginning
    Prototyping
        very good at figuring out scope
        if you write code, DO NOT USE IT in the actual solution

Towards processes that mitigate project risks
    Continuous access to stakeholders
    Incremental and iterative software development approaches






==========
2018-09-27
==========

Requirements Specification

Requirements Specification
    Communication tool between multiple stakeholders
    Communicates understanding of requirements
    Often used as a contract
    Baseline for change control
Need something to document to manage expectations

SRS Contents
    Functionality
    External interfaces
        User
        Hardware
        Software
        Communication
    Performance
    Design constraints
    Other Requirements

Functional Requirements
    inputs => outputs
    user interface structure and behaviour
    ...

Non Functional Requirements

How do we know wer are writing the correct RD?

Quality Characteristics of SRS
    Unambiguous
        - Each statements can be read in exactly one way
    Complete
        - Includes all the significant requirements, eg related to functionality, performance, design constraints, attributes or external intefaces
    Verifiable
        - A process exists to test specification of each requirement
        - If it's not verifiable, it usually means it's ambiguous
    Consistent
        3 types of conflicts
            - Different terms used for the same object
            - Characteristics of objects that conflict
            - Logical or temporal faults
    Modifiable
        - Easy to use organization, easy to change without difficulty
    Traceable
        - The origin of each requirement is clear ('backwards tracability') 
        - Facilities referencing to future documentation related to RS ("Forward tracability") such aas test plans
    Ranked for Importance
        - Contains priority information for each requirement 
    Correct
        - Contains as much but no more than what is required (ie expresses only the real needs of stakeholders)


The users should be able to do X (NOT the system should do X)
The 'System' is much bigger than the software
    Different actors etc Users


Ambiguity in Natural Langue in Requirements Engineering Engineering

Why is Ambiguity a Problem
    Avoid confusion

Subconscious Disambiguation
    Not realizing that a sentence has more than one meaning when reading

Subconscious Ambiguation
    Not realizing that a sentence has more than one meaning when writing
   
Repetitive Myth
    Define a word once, and then use it consistently

Common Guidelines
    Plurality
        Don't use plural constructs (unless absolutely necessarily
    Pronouns
        Avoid
    Only
        Be careful with placement
    All

Define ambiguous terms that you will use at the start of the document
    Must, Should, Each, May






==========
2018-10-01
==========

Project Scope vs Product Scope
    Product is what you're working on
    Project is all the little things that need to be done
    Product will influence project
    Project has to do with deadlines


Software Quality: Non-functional vs Functional Requirements

Software Quality
    Usability: if it doesn't do what you want, its not high quality
    Internal vs External Quality
    
Review: Functional vs Non-functional
    Functional requirements describe 
        fundamental functions of the system
    Non-functional requirements describe 
        constraints on the system 
        constraints from the application domain

Some defn for NFR
    Reliability
    Efficiency
    Integrity
    Usability
    Maintainability
    Flexibility
    Portability
    Reusability
    ...

Another view: Software quality and non-functional requirements
    the extent to which a system, component, or process meets customer or user needs or expectations

Connect NFRs(Quality) to design
    Architecture is like the skeleton, try to get it correct in the beginning
    The client's don't necessarly understand some of these requirements
    Quality Attribute Scenarios

Quality Attribute Scenarios
    Quality attribute, stimulus, response, response measure
    Maintainability: when a new feature is added, the new feature is deployed in <4 hours
        Quality attribute: Maintainability
        Stimulus: when a feature is deployed
        Response:
        Response measure:
    Security: there is never any exposure of PII
        Quality attribute: Security
        Stimulus: Collection of PII 
        Response: It's protected 
        Response measure: Never


NFR = Quality requirement = Quality attribute


Requirements inspections/technical reviews

A slight detour: Technical Reviews
    Technical reviews conduction during:
        - specification
        - design
        - Coding
    Other names
        - Inspections
        - Code reviews
        - Walkthroughs
        ...

Benefits of technical reviews
    Testing during the design phase can cost less time 

Characteristics of technical reviews
    Well defined roles
    Typically no more than 6-7 participants
    No more than 2 hours
    Well defined and agreed outcome
    Seek to uncover erros close to the time they may have been produced

Roles in technical reviews
    Fagan Inspections, moderator has more powers

Fagan inspection process
    Planning
    Overview and Preparation
    Inspection meeting
        Find defects, but do not solve problems
    Process Improvement
    ...

Requirements Reviews
    Round Robin more useful
        - Encourages equal participation
        ...

Guidelines for technical reviews
    Develop a checklist on what is to be reviewed
    Review the product, not the producer
    Set an agenda and maintain it
    Limit debate and rebuttal
    Find defects, but do not solve problems
    Take written notes
    Limit number of participants and insist upon preparation
    Review your earlier reviews and the current review process
    Allocate resources and time schedule for technical reviews
    Conduct meaningful training

Your projects
    Clients conduct a round robin technical review of RD 1.0
    Requirements inspection checklist and template for summary report available in Connex
    ...
Don't wory about verifiability quite yet





==========
2018-10-09
==========

Introduction to Requirements Modeling

Where does this fit?
    1. Identify Problem
    2. Gather Requirements
    3. Analyze & Model Requirements <- THIS ONE
    4. Document requirments ...

Requirements can be difficult to capture
    Not alwasy obvious
    Not easy to express in words
    Different types at differnt levels of detail
    Often related to one another
    Can change and can be time sensitive

So how do we cope with this
    Good job at gatering requirements
        Interviews
        Observations
        Analysis of documents
        Copying from another product's features
    Then model and keep track of requirements
    Use models for requirements validation with all stakeholders

Modeling
    The act of representing something with something else
    We model reality with text and diagrams

Agile vs "Traditional" modeling
    A practicle method for modeling to create software systems
    Based on best practices
    Light Weight
        'Just enough' to get the job done
        Don't model for the sake of modeling

Functional Requirements
    Describe what a system should do to meat the needs of its users
    Let's take the exmple of a system to support a health practitioner to:
        Record an immunization event
        Manage a vaccine inventory
            Add a vaccine to inventory

Functional Requirements
    Can be used in differnt ways
        eg Use Cases
    Supplemented by DOMAIN MODELS and UI MODELS

Elicitations
    Interviews
    Observations
Modeling
    Use cases
    Domain models
        ER Diagrams
        Data Dictionaries
        Data Flow Diagrams
    UI models
Specification

Use Cases Modeling
    Diagrams provide overview of actors and ...
    Informal description
        ...
        AKA a 'user story' from Agile methods
    More Formal
        Preconditions

Domain Model
    Describes entities and relationships in the problem domain
    Modeled using ER diagrams
    (So you have a plan for them when they happen)

UI Model
    Paper or electronic 


Use Cases

Use Case Analysis
    Integral part of RE in user-centered analysis approaches
    Use Cases
        Ways in which the systems is being used
        Useful means of expressing requirements on the functionality of the system
        Written using simple prose -> understandable by a wide range of stakeholders

Use Cases (Examples of definitions)
    Dialogue of an actor with they system

Elements of a Use Case
    Title
    Summary
    ...

Writing Use Cases
    Identify all the actors (Entities that interact with the system)
    Think of how they interact with the system
    ...
    Write use case

Use Cases, Scenarios, use case models
    Slightly different
    Use Case
        Abstract description of how an actor will use the system
    Scenario
        Specific interactiment with the system
    Use Case Model
        One use case model per system, includes multiple use cases

Creating the use case model from Requirements
    Find Actors
    Identify actions
    Narrow actions to specific
    Draw use case model
    Write each use case specification

The Use Case specification should include
    Actors
    Preconditions
    Steps
    Success Condition
    Possible Alternate Paths





==========
2018-10-11
==========

Availability
Server attack
How long it is unavailable
Less than 1 hour a month

Actor and actions

False
False


Structured Analysis -- Or (mostl) Domain Modeling

Traditional 'Structured' Modeling
    To complement the Textual Requirements

ER Diagrams
    Shows in the problem domain the relationship between entity
    Relationships are not universal, can depend on the specific problem domain

Data Modeling
    Look for nouns to use as domain entries
    Define in the data dictionary anything that isn't common

Data Flow Diagram
    Always keep the same entities
    Can be nested
    Not intended to show all the use cases
    Nouns on arrows, not verbs
    
Process-oriented Modeling (Data flow modeling)
    Identify verbs (from use cases)
    Draw process bubble to relate to these actions





==========
2018-10-15
==========

Each diagram has a description

DFD
    Show both before and after
        Problem description and solution

Object Oriented Modeling
    Think about attributes and methods
    In structured analysis, you do not talk about objects

1-1 mapping for each use case to scenario?




==========
2018-10-18
==========

For RSD 1.0
    Use cases
    Sequence diagram
    UI storyboards
        UI model per use case


UI Modeling

Scenario Example

System level and class level sequence diagrams

How do you create a UI model
    visualize everything you learned from your problem domain

Prototypes are early versions of the functionality of the UI

If the prototype isn't correct, you shouldn't build upon it

Pictive
    bring it to a client meeting and make the interface together


Non-Functional Requirements
    The true quality requirements

Quality attributes = quality requirments

Why Quality attribute scenairo
    Measureable = objective
    Test design or implementation
    Acceptance criteria: I won't sign off untill the requirement is met

Treatment of NFRs
    The lower the number of branches, the easier it is to update the code
    The quality attribute would create a requirement in your project and code
        You want to make this measureable

Making Requirements measureable
    Low coupling, high cohesion

Maintainability
    Less complex code is easier to maintain
    Factors effecting maintainability:

Reliability
    used to judge quality of software
    Probability of failure on demand





==========
2018-10-22
==========

Verification and Validation (V&V)

Validation: The software should do what the users need 
Verification : The software should conform to its specification

Validation and verification critera
    Validation 
        Discover/understand Domain properties
        Discover/understand Requiremets
    Verification 
        program satisfies specification
        specification given the domain properties satisfies requirements

A V&V Plan
    Major activities
        Reviews, inspections, and walkthroughs
        Testing
    Happens at all phases in the lifecycle

Development stages and V&V activities
    Implementation: desk checking/unit testing before you intergrate with others

V&V: on and about requirements
    Validation techniques:
    Inspections of the requirements document for:
        Completeness and consistency
        Conformance to standards
        Conflicts
        Ambiguous 

V&V: Requirements Phase
    Assure requirements are testable
    Create a preliminary version of the Acceptance test plan, including a verification matrix relating requirements to tests

V&V: software architecture (prelinary design) phaes
    Updating the preliminary version of Acceptance Test Plan and the verfication matrix
    Informal reviews and walkthroughs or inspection of the preliminary software

V&V: Softwre detailed design phase
    Complete the Acceptance Test Plan and the verfication matrix
    Conduct informal reviews and walkthroughs or inspection of the detailed software

V&V: Implementation phase
    Code inspections and/or walkthroughs
    Unit testing software and data structures
    Locating, correcting, and retesting errors
    Developlent of detailed integration and product testing procedures

Code Etsting
    Nonexecution based testing
    Execution based testing: Aganst test cases

Execution based testing
    Blackbox testing: code is ignored
    Whitebox testing: code is tested

Black box testing
    Equivilence Testing and Boundary Value Analysis

V&V: Integration phase
    Conduction tests per test procedures
    Document test performance
    Try to fix it

Acceptance and delivery phase
    Hasn't been tested in the operating environment





==========
2018-10-23
==========

1. Problem with group elicitation(?)
    Group think
    Need Skilled facilitator
    Hard to focus

Survey: reach out
Elicitation techniques: Contextual design

2. Explain 2 dissadvantages with Questionnaires
    Not interactive, stuck with the answers
    Sample size
    Context
    Leading questions/bias - solved by pilot

5. Explain what it means thata an SRS is internally consistent. Provide an example where it could be internally inconsistent
    Vocabulary should be consistent
    Terms or elements that are defined should not conflict

6. Define Backwards and Forwards Traceability. What is their role in V&V?
    Backwards Traceability: Genesys of a requirement. Linking an elicitation to a requirement. Paper trail
    Forward Traceability: Organization of requirements to track how they change. 

8. How would you measure these non-functional requirements? 
    Useability: performance time
    Complexity: Steps to perform a task
    Reliability: downtime per month, time between failures, % of correct deliverabiles

10. DFD for a scenario
    Don't forget the system boundary

11. What could go wrong in this bidding scenario
    Cusomizations might not be possible
    V&V is missing, only meet once




==========
2018-11-05
==========

Change Management

Stakeholders and an interesting relationship
    Ongoing negotiation process

Software evolution and change managements
    in the bigger picture of software evolution
    Reasons for change
        new requirements become apparent
        business and strategic goals change
        changes in customer market
    Change management: largely a project management activity
    Possible responses to change
        Add new requirements
        Modify existing requiremnets
        Remove existing requirements

Change Management Techniques
    Reqirements prioritization, triage (highest priority first)
        -> release planning (different release dates for different features)
    Requirements traceability
    Formal change management process

Requirements Traceability
    Backwards Traceability
        Requirements rational, relation to anything that produces a requirement
    Forward Traceability
        link a requirement to use case/ui model (requirement)
    Important for:
        assessing change requests
        Project management: progress visibility, risk management

    Harder to do in practice
    Weak current tool support in:
        Tracing between different tools

Formal Change Managment
    Configuration management
        versioning of the SRS
        Baselining the SRS after the requirements analysis was complete
    The latest SRS should include the current understanding and agreement wrt requirements
    Change control board in charge of reviewing and approving change requests (barrier causes thought about necessary changes)
    Changes between versions should be documented

Pre and Post Requirements traceability ant Unisys: a case study
    Not accept a one line statement of a requirement
    for project write down:
        rationale
        Scenairo

Requirements Traceability

In RSD 2.0
    For each requirement, include rationale and test scenario
    Create a requirements Traceability Matrix


Midterm
    6. a and c
    8. Correctness, completeness, ...
    13. only worked with trusted/existing customers
        gives bias answers





==========
2018-11-19
==========

RE in the Age of AI - Alessia Knauss, Research Specialist Systems

Contextual Requirements: Requirements that come up at runtime

Colaboration between the driver and self-driving cars
    Support the driver when manually driving
    Trust the system when self-driving
    Have the system trust you

It's hard to get the context
Requirements change at runtime

Requirements as Runtime Entities
    Not just understanding the requirements, but the system can understand, document, and modify requirements as well

Self-adaptive system

Ex. Parking Lot System
    Wouldn't fill parking spots close to the pilliars

Context and Requirements for Adaptive Systems
    Traditional 
        if amount of cars > parking spots on second floor, direct to ground floor
    For adaptive systems, the focus is on context
        Use some concepts to document the context knowledge
        Implement techniques that would understand where you park
    Self-Adaptive Systems
        ...

Context and Requirements
    A contextual requirement consists of a 2-tuple of the expected system behaviour and the specific context within ...

Contextual Requirements in Self-Adaptive Systems
    
Cotextual Requirements Affected by Runtime Uncertainty
    Needs to be done at runtime becuase it's hard to design without context

AI and Feedback Loops
    mine data to come up with the contextual requirements






==========
2018-11-22
==========

Validation and verification

Predicate Logic in Formal RE specifications
    A: a person comes close to the door
    B: the door opens
    C: motion sensor is triggered
    D: OPEN signal to motor

    Reqs: {A -> B}
    Dom: {A -> C, D -> B}
    Spec: {C -> D}
    Prove that Dom ^ Spec = Reqs 

Definition and overview of formal methods
    applications of discrete mathmatics
    Modeling and analysis
    Mathmatically-precise foundation
    Formal language for describing a software artifact
    Formal proofs
    About properties of the artifact

Use of formal methods
    Reasoning about a formal description
    The requirements problem
        Verification does not eliminate the need for validaton
        The dicipline of producing a formal specification can result in fewer specifications errors
    When to use formal methods
        Mostly functional requirements
        Critical components of the system

Formal requirements Specification
    Formal reqirements spefications are specifications that have formal semantics and syntax
    Allows ...
    ...

Formal specification in RE
    Useful in reasoning about the relationships between domain properties, requirements and specifications
    Prove properties ...
    ...

The role of FMs in RE
    Domain: a description of how the environment is
    Requirements: A description of how we would like the environment to be
    Machine: A description of how we inted to change the environment (by deploying a macnine that does "something" to make our wishes become true)

Types of formal Specifications
    Property-oriented languages
        System is described by a set of axiomatic properties
    Model-oriented languates
        System is described by a state, and operations
        ...

Automated Verification
    One major benefit ...

Theorem Proving
    System is desribed with a set of formulas
    Specifications...
    ...

Model-oriented languages
    Represent systems as set of states
    ...

Model-checking

Challenges in applying formal specification methods
    Limited scope (to functional requirements)
    Isolation from other software products and processes in organizations
    Cost (require high expertise in formal systems and mathematical logic)





==========
2018-11-26
==========

IBM Project
    Online communication
    Threaded discussion on a user story
    Wanted to know if we can look at the discussion and tell how the project is going
        If you see a lot of clairification, it isn't good
    Wanted to code every comment into
        Clairification (BAD)
        Coordination/communication (GOOD)
    
    Built a classifier (machine learning) to automatically classify comments
    Came out with 6 different patterns
        Indifferent - think they know, but might not
        Back to draft - bring in an expert
        Textbook example
        Procrastination
        Happy ending
        Discordant

Ecrits (critical customer support tickets)
    Can you predict when a ticket will become escalated?


Defn of a startup
    "An organization in search of a scalavle, repeatable, profitable business model"
    "A human institution designed to create a new product or service under conditons of extreme uncertainty"

In the study, the defn
    Has recently spun-off from a large company
    is still at a stage without a solid revenue stream
    Has not yet gone public

Research Methodology
    1 - 10 years
    allowed to attend meetings
    full day observations
    semi-structured interviews

Requirements artifacts
    what made them change and evolve

Requirements Related Roles
    Started out general, but moved to more specialized roles

Knowledge Management
    How you colect and store knoledge in your company
    How to communicate with customers

Product Quality
    Tradeoffs between quality and speed start to matter

Technical Debt
    Doing something right takes more time, but you don't have time so you say you'll come back to it later
    Understanding the impact of technical devt on product/service matters

Planning
    Company/product vision and alignmnet with it matters


About the presentation
20min
    15 as the Designers
    5 with the communication witht he client




